import java.io.BufferedReader;
import java.io.FileReader;

public class Pixelart {
	static int[][] board;
	static int red, black;
	static int[][] edges;
	
	public static void main(String[] args) {
		
		try(BufferedReader bR = new BufferedReader(new FileReader("art.txt"))) {
			int rows, cols;
			String line;
			String[] info;
			int[][] blackSquares;
			int[][] redSquares;
			boolean flow;

			int redCount = 0;
			int blackCount = 0;
			int source, sink;
			
			red = 0;
			black = 0;
			
			line = bR.readLine();
			info = line.split(" ");
			cols = Integer.parseInt(info[0]);
			rows = Integer.parseInt(info[1]);
			
			board = new int[rows][cols];
			
			for (int i = 0; i < rows; i++) {
				line = bR.readLine();
				for (int j = 0; j < cols; j++) {
					if (line.charAt(j) == '#') {
						board[i][j] = 0;
					} else {
						board[i][j] = -1;
					}
				}
			}
			
			for (int i = 0; i < rows; i++) {
				for (int j = 0; j < cols; j++) {
					if (board[i][j] == 0) {
						checker(i , j, true);
					}
				}
			}
			
			if (black == red) {
				blackSquares = new int[black][2];
				redSquares = new int[red][2];
			
				for (int i = 0; i < rows; i++) {
					for (int j = 0; j < cols; j++) {
						if (board[i][j] == 1) {
							redSquares[redCount][0] = i;
							redSquares[redCount][1] = j;
							redCount++;
						} else if (board[i][j] == 2) {
							blackSquares[blackCount][0] = i;
							blackSquares[blackCount][1] = j;
							blackCount++;
						}
					}
				}
				
				edges = new int[black+red+2][black+red+2];
				source = black+red;
				sink = black+red+1;
				
				for (int i = 0; i < black+red+2; i++) {
					for (int j = 0; j < black+red+2; j++) {
						edges[i][j] = 0;
					}
				}
				
				for (int i = 0; i < black; i++) {
					for (int j = 0; j < red; j++) {
						if (blackSquares[i][0] == redSquares[j][0] && blackSquares[i][1] == redSquares[j][1] - 1 || 
								blackSquares[i][0] == redSquares[j][0] && blackSquares[i][1] == redSquares[j][1] + 1 || 
								blackSquares[i][0] == redSquares[j][0] - 1 && blackSquares[i][1] == redSquares[j][1] ||
								blackSquares[i][0] == redSquares[j][0] + 1 && blackSquares[i][1] == redSquares[j][1] ) {
							edges[i][black + j] = 1;
						}
					}
				}
				
				for (int i = 0; i < black; i++) {
					edges[source][i] = 1;
				}
				
				for (int i = 0; i < red; i++) {
					edges[black + i][sink] = 1;
				}
				int count = 0;
				
				do {
					flow = augmentingPath();
					count++;
				} while (flow);
				
				if (count == black + 1) {
					for (int i = black; i < red+black; i++) {
						for (int j = 0; j < black; j++) {
							if (edges[i][j] == 1) {
								System.out.println(redSquares[i-black][1] + " " + redSquares[i-black][0] + " " 
										+ blackSquares[j][1] + " " + blackSquares[j][0]);
							}
						}
					}
				} else {
					System.out.println("Impossible");
				}
				
			} else {
				System.out.println("Impossible");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			System.err.println("Error");
		}
	}

	private static boolean augmentingPath() {
		int[] visits = new int[edges.length];
		int[] queue = new int[edges.length];
		int start = 0;
		int end = 0;
		
		for (int i = 0; i < visits.length; i++) {
			visits[i] = -1;
		}
		
		queue[start] = edges.length - 2;
		visits[queue[start]] = -2;
		start++;
		
		while (start > end && visits[edges.length-1] == -1) {
			for (int i = 0; i < edges.length; i++) {
				if (edges[queue[end]][i] == 1 && visits[i] == -1) {
					queue[start] = i;
					start++;
					visits[i] = queue[end];
				}
			}
			end++;
		}
		
		if (start <= end) {
			return false;
		} else {
			int prev = edges.length-1;
			int cur;
			while (visits[prev] != -2) {
				cur = prev;
				prev = visits[prev];
				
//				System.out.println(cur + " " + prev);
				
				edges[prev][cur] = 0;
				edges[cur][prev] = 1;
			}
			
			return true;
		}
	}

	private static void checker(int i, int j, boolean redColor) {
		
		if (redColor) {
			board[i][j] = 1;
			red++;
		} else {
			board[i][j] = 2;
			black++;
		}
		
		if (i > 0 && board[i-1][j] == 0) {
			checker(i-1, j, !redColor);
		}
		if (j > 0 && board[i][j-1] == 0) {
			checker(i, j-1, !redColor);
		}
		if (i < board.length - 1 && board[i+1][j] == 0) {
			checker(i+1, j, !redColor);
		}
		if (j < board[i].length - 1 && board[i][j + 1] == 0) {
			checker(i, j+1, !redColor);
		}
	}

}

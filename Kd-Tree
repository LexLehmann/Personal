import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Random;

public class kdTree {
	static int k, numPoints;
	static int[][] tree;

	public static void main(String[] args) {
		try(BufferedReader bR = new BufferedReader(new FileReader("points.txt"))) {
		int[][] inputArray;
		int[][][] sortedArrays;
		String[] info;
		String line;
		
		line = bR.readLine();
		info = line.split(" ");
		
		k = Integer.parseInt(info[0]);
		numPoints = Integer.parseInt(info[1]);
		
		inputArray = new int[numPoints][];
		for(int i = 0; i < numPoints; i++) {
			line = bR.readLine();
			info = line.split(" ");
			int[] nextPoint = new int[k];
			
			for (int j = 0; j < k; j++) {
				nextPoint[j] = Integer.parseInt(info[j]);
			}
			
			inputArray[i] = nextPoint;
		}
		
		sortedArrays = new int[k][][];
		
		for (int i = 0; i < k; i++) {
			int[][] newCopy = Arrays.copyOf(inputArray, numPoints);
			quickSort(newCopy, 0, numPoints-1, i);
			
			sortedArrays[i] = newCopy;
		}
		
/*		for (int i = 0; i < k; i++) {
			for (int j = 0; j < numPoints; j++) {
				for (int val = 0; val < k; val++) {
					System.out.print(sortedArrays[i][j][val] + " ");
				}
				System.out.println("");
			}
			System.out.println("");
		}
*/		tree = new int[numPoints][];

		buildTree(sortedArrays, 1, 0);
		
		} catch (Exception ex) {
			ex.printStackTrace();
			System.err.println("Error");
		}
	}

	
	private static void buildTree(int[][][] arrays, int i, int k) {
		tree[i] = arrays[k][arrays.length/2];
	}


	public static void quickSort(int[][] array, int start, int end, int k) {
		Random rand = new Random(); 
		if (start < end) {
			int pivot = rand.nextInt(end - start) + start;
			
			int[] temp = array[pivot];
			array[pivot] = array[start];
			array[start] = temp;
			
			int front = start;
			int back = end;
			boolean pivotFront = true;
			while (front < back) {
				if (array[front][k] > array[back][k]) {
					temp = array[front];
					array[front] = array[back];
					array[back] = temp;
					if (pivotFront) {
						front++;
						pivotFront = false;
					} else {
						back--;
						pivotFront = true;
					}
				} else {
					if (pivotFront) {
						back--;
					} else {
						front++;
					}
				}
			}
			quickSort(array, start, front-1, k);
			quickSort(array, front+1, end, k);
		}
	}
}
